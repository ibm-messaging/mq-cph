#<copyright notice="lm-source" pids="" years="2005,2021">
#***************************************************************************
# Copyright (c) 2005,2021 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Contributors:
#    Jerry Stevens - Initial implementation
#    Various members of the WebSphere MQ Performance Team at IBM Hursley UK
#***************************************************************************
#*</copyright>
############################################################################
#                                                                          #
# Performance Harness for IBM MQ C-MQI interface                           #
#                                                                          #
############################################################################

ControlThread.desc=\
Manage the lifecycle of the application and any WorkerThreads.\n\
This also controls the aggregation and reporting of performance counters.

tc.dflt = Dummy
tc.desc = Worker thread implementation to use.
tc.type = string
tc.xtra = This controls the type of workload/messaging being executed by cph.

ss.dflt = 10
ss.desc = Statistics reporting period.
ss.type = int
ss.xtra = Setting this to 0 will disable periodic reporting entirely.

ls.dflt = false
ls.desc = Print latency stats for thread 0
ls.type = bool
ls.xtra = Setting this to true will print max,min,avg latency per iteration on thread 0 every reporting period.

nt.dflt = 1
nt.desc = Number of WorkerThreads.
nt.type = int

rl.dflt = 60
rl.desc = Run length in seconds.
rl.type = int
rl.xtra = Setting this to 0 will disable the timer and run forever.

id.dflt =
id.desc = Process identfier.
id.type = char*
id.xtra = If set, this will be displayed in the statistics reporting.  This is\n\
of use if you have to merge the output of more than one instance of the tool.

su.dflt = true
su.desc = Display final summary.
su.type = bool
su.xtra = This setting is independant of the periodic statistics reporting.
su.hide = true

sd.dflt = normal
sd.desc = Sets what is reported as totalDuration.
sd.type = char*
sd.xtra = "normal" = from 1st iteration to last iteration, excluding setup/takedown.\n\
"tlf" = Time to Last Fire, from start of main thread till last iteration completes\n\
(includes setup time but not takedown)
sd.hide =true

sp.dflt = false
sp.desc = Display per-thread performance data.
sp.type = bool
sp.hide = true

wi.dflt = 1000
wi.desc = WorkerThread start interval (ms).
wi.type = int
wi.xtra = The number of milliseconds between one thread reaching the status of 'running'\n\
and the next being started, unless wt is set to zero, in which case this is simply the interval\n\
between starting each worker thread.
wi.hide = true

wt.dflt = 30
wt.desc = WorkerThread start timeout (s).
wt.type = int
wt.xtra = The maximum number of seconds after starting a worker thread to wait for its status to change to 'running',\n\
CPH will fail if any thread takes longer than this time to start.\n\
Special case: if set to zero (0), CPH will not wait for each worker thread to start.
wt.hide = true

sh.dflt = true
sh.desc = Use signal handler to trap SIGINT (CTRL-C).
sh.type = bool
sh.hide = true

ts.dflt = 0
ts.desc = Thread stack size (Kb, Linux only).
ts.type = int
ts.xtra = Setting this to 0 will disable cph from setting a per thread stack allocation.

