#<copyright notice="lm-source" pids="" years="2015,2020">
#***************************************************************************
# Copyright (c) 2015,2020 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Contributors:
#    Jerry Stevens - Initial implementation
#    Various members of the WebSphere MQ Performance Team at IBM Hursley UK
#***************************************************************************
#*</copyright>
############################################################################
#                                                                          #
# Performance Harness for IBM MQ C-MQI interface                           #
#                                                                          #
############################################################################

RequesterReconnectTimer.desc = Send messages to a Queue & gets a response from a different queue (with reconnection timer)

# Options for RequesterReconnectTimer additional to those specified in MQOpts.properties

co.dflt = true
co.desc = Get the reply message, using the request message ID as a correlation ID.
co.type = bool
co.xtra = This allows multiple Requesters to work with the same output queue concurrently.\n\
The correlID of the reply is expected to be the same as the automatically-generated \n\
message ID of the request (-co must be set on the responders for this to be enforced). \n\
This option is true by default for historical compatibility.

# Message selector options
cs.dflt = false
cs.desc = Use message selectors to get messages off the queue
cs.type = bool

gs.dflt = UNSPECIFIED
gs.desc = Use generic selector instead of correlId to get messages off REPLY queue
gs.type = char[MQ_SELECTOR_LENGTH]

# No defaults for iq and oq set here, as they're currently also defined in DestinationFactory.properties

#iq.dflt = REQUEST
iq.desc = Input (request) queue name prefix.
iq.type = char[MQ_Q_NAME_LENGTH]
iq.xtra = If no other destination parameters are set, then nothing will be appended to this.

#oq.dflt = REPLY
oq.desc = Output (reply) queue name prefix.
iq.type = char[MQ_Q_NAME_LENGTH]
oq.xtra = If no other destination parameters are set, then nothing will be appended to this.

dq.dflt = 1
dq.desc = Number of DQ channels to use.
dq.type = int
dq.xtra = If this is set to more than 1, then additional channels will be configured on the client and server QM.\n\
Additional queue aliases will also be setup on the client QM, which in conjunction with setting the ReplyToQ to a Q alias \n\
will result in separate reply channels being used for the reply messages.

#txp & txg allow us to specify whether to use transactions for the PUT & GET independently
#This is an alternative to setting tx which controls PUT and GET together.
#Note that only setting txp is not really a valid test case, but it's here in case we also want to add
#the ability for persistent PUT with non-persistent GET in the future.

txp.dflt = false
txp.desc = Use transactions for PUT, (tx must not be set)
txp.type = bool

txg.dflt = false
txg.desc = Use transactions for GET, (tx must not be set)
txg.type = bool

h2.dflt = secondaryhost
h2.desc = hostname or IP address of standby QM host machine
h2.type = char[80]

p2.dflt = 0
p2.desc = Port of standby QM host machine
p2.type = int
p2.xtra = Default value of 0 will cause p2 to be set to the same value as jp